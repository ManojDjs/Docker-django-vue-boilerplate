{"remainingRequest":"/home/ubuntu/PycharmProjects/Docker-django-vue-boilerplate/node_modules/babel-loader/lib/index.js!/home/ubuntu/PycharmProjects/Docker-django-vue-boilerplate/node_modules/vue-loader-v16/dist/templateLoader.js??ref--6!/home/ubuntu/PycharmProjects/Docker-django-vue-boilerplate/node_modules/cache-loader/dist/cjs.js??ref--0-0!/home/ubuntu/PycharmProjects/Docker-django-vue-boilerplate/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/ubuntu/PycharmProjects/Docker-django-vue-boilerplate/node_modules/primevue/components/inputnumber/InputNumber.vue?vue&type=template&id=8fcd1762&bindings={\"modelValue\":\"props\",\"format\":\"props\",\"showButtons\":\"props\",\"buttonLayout\":\"props\",\"incrementButtonClass\":\"props\",\"decrementButtonClass\":\"props\",\"incrementButtonIcon\":\"props\",\"decrementButtonIcon\":\"props\",\"locale\":\"props\",\"localeMatcher\":\"props\",\"mode\":\"props\",\"prefix\":\"props\",\"suffix\":\"props\",\"currency\":\"props\",\"currencyDisplay\":\"props\",\"useGrouping\":\"props\",\"minFractionDigits\":\"props\",\"maxFractionDigits\":\"props\",\"min\":\"props\",\"max\":\"props\",\"step\":\"props\",\"style\":\"props\",\"class\":\"props\",\"inputStyle\":\"props\",\"inputClass\":\"props\",\"focused\":\"data\",\"getOptions\":\"options\",\"constructParser\":\"options\",\"updateConstructParser\":\"options\",\"escapeRegExp\":\"options\",\"getDecimalExpression\":\"options\",\"getGroupingExpression\":\"options\",\"getMinusSignExpression\":\"options\",\"getCurrencyExpression\":\"options\",\"getPrefixExpression\":\"options\",\"getSuffixExpression\":\"options\",\"formatValue\":\"options\",\"parseValue\":\"options\",\"repeat\":\"options\",\"spin\":\"options\",\"onUpButtonMouseDown\":\"options\",\"onUpButtonMouseUp\":\"options\",\"onUpButtonMouseLeave\":\"options\",\"onUpButtonKeyUp\":\"options\",\"onUpButtonKeyDown\":\"options\",\"onDownButtonMouseDown\":\"options\",\"onDownButtonMouseUp\":\"options\",\"onDownButtonMouseLeave\":\"options\",\"onDownButtonKeyUp\":\"options\",\"onDownButtonKeyDown\":\"options\",\"onUserInput\":\"options\",\"onInputKeyDown\":\"options\",\"onInputKeyPress\":\"options\",\"onPaste\":\"options\",\"allowMinusSign\":\"options\",\"isMinusSign\":\"options\",\"isDecimalSign\":\"options\",\"insert\":\"options\",\"insertText\":\"options\",\"deleteRange\":\"options\",\"initCursor\":\"options\",\"onInputClick\":\"options\",\"isNumeralChar\":\"options\",\"resetRegex\":\"options\",\"updateValue\":\"options\",\"handleOnInput\":\"options\",\"isValueChanged\":\"options\",\"validateValue\":\"options\",\"updateInput\":\"options\",\"updateModel\":\"options\",\"onInputFocus\":\"options\",\"onInputBlur\":\"options\",\"clearTimer\":\"options\",\"containerClass\":\"options\",\"upButtonClass\":\"options\",\"downButtonClass\":\"options\",\"filled\":\"options\",\"upButtonListeners\":\"options\",\"downButtonListeners\":\"options\",\"formattedValue\":\"options\"}","dependencies":[{"path":"/home/ubuntu/PycharmProjects/Docker-django-vue-boilerplate/node_modules/primevue/components/inputnumber/InputNumber.vue","mtime":499162500000},{"path":"/home/ubuntu/PycharmProjects/Docker-django-vue-boilerplate/node_modules/cache-loader/dist/cjs.js","mtime":1604800558196},{"path":"/home/ubuntu/PycharmProjects/Docker-django-vue-boilerplate/node_modules/babel-loader/lib/index.js","mtime":1604800558176},{"path":"/home/ubuntu/PycharmProjects/Docker-django-vue-boilerplate/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1604800559128},{"path":"/home/ubuntu/PycharmProjects/Docker-django-vue-boilerplate/node_modules/cache-loader/dist/cjs.js","mtime":1604800558196},{"path":"/home/ubuntu/PycharmProjects/Docker-django-vue-boilerplate/node_modules/vue-loader-v16/dist/index.js","mtime":1604800559128}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:aW1wb3J0IHsgcmVzb2x2ZUNvbXBvbmVudCBhcyBfcmVzb2x2ZUNvbXBvbmVudCwgbWVyZ2VQcm9wcyBhcyBfbWVyZ2VQcm9wcywgY3JlYXRlVk5vZGUgYXMgX2NyZWF0ZVZOb2RlLCB0b0hhbmRsZXJzIGFzIF90b0hhbmRsZXJzLCBvcGVuQmxvY2sgYXMgX29wZW5CbG9jaywgY3JlYXRlQmxvY2sgYXMgX2NyZWF0ZUJsb2NrLCBjcmVhdGVDb21tZW50Vk5vZGUgYXMgX2NyZWF0ZUNvbW1lbnRWTm9kZSB9IGZyb20gInZ1ZSI7CnZhciBfaG9pc3RlZF8xID0gewogIGtleTogMCwKICBjbGFzczogInAtaW5wdXRudW1iZXItYnV0dG9uLWdyb3VwIgp9OwpleHBvcnQgZnVuY3Rpb24gcmVuZGVyKF9jdHgsIF9jYWNoZSwgJHByb3BzLCAkc2V0dXAsICRkYXRhLCAkb3B0aW9ucykgewogIHZhciBfY29tcG9uZW50X0lOSW5wdXRUZXh0ID0gX3Jlc29sdmVDb21wb25lbnQoIklOSW5wdXRUZXh0Iik7CgogIHZhciBfY29tcG9uZW50X0lOQnV0dG9uID0gX3Jlc29sdmVDb21wb25lbnQoIklOQnV0dG9uIik7CgogIHJldHVybiBfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jaygic3BhbiIsIHsKICAgIGNsYXNzOiAkb3B0aW9ucy5jb250YWluZXJDbGFzcywKICAgIHN0eWxlOiAkcHJvcHMuc3R5bGUKICB9LCBbX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfSU5JbnB1dFRleHQsIF9tZXJnZVByb3BzKHsKICAgIHJlZjogImlucHV0IiwKICAgIGNsYXNzOiBbJ3AtaW5wdXRudW1iZXItaW5wdXQnLCAkcHJvcHMuaW5wdXRDbGFzc10sCiAgICBzdHlsZTogJHByb3BzLmlucHV0U3R5bGUsCiAgICB2YWx1ZTogJG9wdGlvbnMuZm9ybWF0dGVkVmFsdWUKICB9LCBfY3R4LiRhdHRycywgewogICAgImFyaWEtdmFsdW1pbiI6ICRwcm9wcy5taW4sCiAgICAiYXJpYS12YWx1ZW1heCI6ICRwcm9wcy5tYXgsCiAgICBvbklucHV0OiAkb3B0aW9ucy5vblVzZXJJbnB1dCwKICAgIG9uS2V5ZG93bjogJG9wdGlvbnMub25JbnB1dEtleURvd24sCiAgICBvbktleXByZXNzOiAkb3B0aW9ucy5vbklucHV0S2V5UHJlc3MsCiAgICBvblBhc3RlOiAkb3B0aW9ucy5vblBhc3RlLAogICAgb25DbGljazogJG9wdGlvbnMub25JbnB1dENsaWNrLAogICAgb25Gb2N1czogJG9wdGlvbnMub25JbnB1dEZvY3VzLAogICAgb25CbHVyOiAkb3B0aW9ucy5vbklucHV0Qmx1cgogIH0pLCBudWxsLCAxNgogIC8qIEZVTExfUFJPUFMgKi8KICAsIFsiY2xhc3MiLCAic3R5bGUiLCAidmFsdWUiLCAiYXJpYS12YWx1bWluIiwgImFyaWEtdmFsdWVtYXgiLCAib25JbnB1dCIsICJvbktleWRvd24iLCAib25LZXlwcmVzcyIsICJvblBhc3RlIiwgIm9uQ2xpY2siLCAib25Gb2N1cyIsICJvbkJsdXIiXSksICRwcm9wcy5zaG93QnV0dG9ucyAmJiAkcHJvcHMuYnV0dG9uTGF5b3V0ID09PSAnc3RhY2tlZCcgPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soInNwYW4iLCBfaG9pc3RlZF8xLCBbX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfSU5CdXR0b24sIF9tZXJnZVByb3BzKHsKICAgIGNsYXNzOiAkb3B0aW9ucy51cEJ1dHRvbkNsYXNzLAogICAgaWNvbjogJHByb3BzLmluY3JlbWVudEJ1dHRvbkljb24KICB9LCBfdG9IYW5kbGVycygkb3B0aW9ucy51cEJ1dHRvbkxpc3RlbmVycyksIHsKICAgIGRpc2FibGVkOiBfY3R4LiRhdHRycy5kaXNhYmxlZAogIH0pLCBudWxsLCAxNgogIC8qIEZVTExfUFJPUFMgKi8KICAsIFsiY2xhc3MiLCAiaWNvbiIsICJkaXNhYmxlZCJdKSwgX2NyZWF0ZVZOb2RlKF9jb21wb25lbnRfSU5CdXR0b24sIF9tZXJnZVByb3BzKHsKICAgIGNsYXNzOiAkb3B0aW9ucy5kb3duQnV0dG9uQ2xhc3MsCiAgICBpY29uOiAkcHJvcHMuZGVjcmVtZW50QnV0dG9uSWNvbgogIH0sIF90b0hhbmRsZXJzKCRvcHRpb25zLmRvd25CdXR0b25MaXN0ZW5lcnMpLCB7CiAgICBkaXNhYmxlZDogX2N0eC4kYXR0cnMuZGlzYWJsZWQKICB9KSwgbnVsbCwgMTYKICAvKiBGVUxMX1BST1BTICovCiAgLCBbImNsYXNzIiwgImljb24iLCAiZGlzYWJsZWQiXSldKSkgOiBfY3JlYXRlQ29tbWVudFZOb2RlKCJ2LWlmIiwgdHJ1ZSksICRwcm9wcy5zaG93QnV0dG9ucyAmJiAkcHJvcHMuYnV0dG9uTGF5b3V0ICE9PSAnc3RhY2tlZCcgPyAoX29wZW5CbG9jaygpLCBfY3JlYXRlQmxvY2soX2NvbXBvbmVudF9JTkJ1dHRvbiwgX21lcmdlUHJvcHMoewogICAga2V5OiAxLAogICAgY2xhc3M6ICRvcHRpb25zLnVwQnV0dG9uQ2xhc3MsCiAgICBpY29uOiAkcHJvcHMuaW5jcmVtZW50QnV0dG9uSWNvbgogIH0sIF90b0hhbmRsZXJzKCRvcHRpb25zLnVwQnV0dG9uTGlzdGVuZXJzKSwgewogICAgZGlzYWJsZWQ6IF9jdHguJGF0dHJzLmRpc2FibGVkCiAgfSksIG51bGwsIDE2CiAgLyogRlVMTF9QUk9QUyAqLwogICwgWyJjbGFzcyIsICJpY29uIiwgImRpc2FibGVkIl0pKSA6IF9jcmVhdGVDb21tZW50Vk5vZGUoInYtaWYiLCB0cnVlKSwgJHByb3BzLnNob3dCdXR0b25zICYmICRwcm9wcy5idXR0b25MYXlvdXQgIT09ICdzdGFja2VkJyA/IChfb3BlbkJsb2NrKCksIF9jcmVhdGVCbG9jayhfY29tcG9uZW50X0lOQnV0dG9uLCBfbWVyZ2VQcm9wcyh7CiAgICBrZXk6IDIsCiAgICBjbGFzczogJG9wdGlvbnMuZG93bkJ1dHRvbkNsYXNzLAogICAgaWNvbjogJHByb3BzLmRlY3JlbWVudEJ1dHRvbkljb24KICB9LCBfdG9IYW5kbGVycygkb3B0aW9ucy5kb3duQnV0dG9uTGlzdGVuZXJzKSwgewogICAgZGlzYWJsZWQ6IF9jdHguJGF0dHJzLmRpc2FibGVkCiAgfSksIG51bGwsIDE2CiAgLyogRlVMTF9QUk9QUyAqLwogICwgWyJjbGFzcyIsICJpY29uIiwgImRpc2FibGVkIl0pKSA6IF9jcmVhdGVDb21tZW50Vk5vZGUoInYtaWYiLCB0cnVlKV0sIDYKICAvKiBDTEFTUywgU1RZTEUgKi8KICApOwp9"},{"version":3,"sources":["/home/ubuntu/PycharmProjects/Docker-django-vue-boilerplate/node_modules/primevue/components/inputnumber/InputNumber.vue"],"names":[],"mappings":";;;AAIc,EAAA,KAAK,EAAC;;;;;;;uBAHhB,YAAA,CASO,MATP,EASO;AATA,IAAA,KAAK,EAAE,QAAA,CAAA,cASP;AATwB,IAAA,KAAK,EAAE,MAAA,CAAA;AAS/B,GATP,E,CACI,YAAA,CACgK,sBADhK,EAAA,WAAA,CACgK;AADnJ,IAAA,GAAG,EAAC,OAC+I;AADtI,IAAA,KAAK,EAAA,CAAA,qBAAA,EAA0B,MAAA,CAAA,UAA1B,CACiI;AADzF,IAAA,KAAK,EAAE,MAAA,CAAA,UACkF;AADrE,IAAA,KAAK,EAAE,QAAA,CAAA;AAC8D,GADhK,EAA0H,IAAA,CAAA,MAA1H,EAAgI;AAAG,oBAAc,MAAA,CAAA,GAAjB;AAAuB,qBAAe,MAAA,CAAA,GAAtC;AAC5H,IAAA,OAAK,EAAE,QAAA,CAAA,WADqH;AACvG,IAAA,SAAO,EAAE,QAAA,CAAA,cAD8F;AAC7E,IAAA,UAAQ,EAAE,QAAA,CAAA,eADmE;AACjD,IAAA,OAAK,EAAE,QAAA,CAAA,OAD0C;AAChC,IAAA,OAAK,EAAE,QAAA,CAAA,YADyB;AACV,IAAA,OAAK,EAAE,QAAA,CAAA,YADG;AACY,IAAA,MAAI,EAAE,QAAA,CAAA;AADlB,GAAhI,CAAA,E,IAAA,E;;AAAA,I,6IAAA,C,EAE+C,MAAA,CAAA,WAAA,IAAe,MAAA,CAAA,YAAA,KAAY,S,kBAA1E,YAAA,CAGO,MAHP,EAAA,UAAA,EAGO,CAFH,YAAA,CAAoH,mBAApH,EAAA,WAAA,CAAoH;AAAzG,IAAA,KAAK,EAAE,QAAA,CAAA,aAAkG;AAAlF,IAAA,IAAI,EAAE,MAAA,CAAA;AAA4E,GAApH,EAA6D,WAAA,CAAwB,QAAA,CAAD,iBAAvB,CAA7D,EAAoF;AAAG,IAAA,QAAQ,EAAE,IAAA,CAAA,MAAA,CAAO;AAApB,GAApF,CAAA,E,IAAA,E;;AAAA,I,6BAAA,CAEG,EADH,YAAA,CAAwH,mBAAxH,EAAA,WAAA,CAAwH;AAA7G,IAAA,KAAK,EAAE,QAAA,CAAA,eAAsG;AAApF,IAAA,IAAI,EAAE,MAAA,CAAA;AAA8E,GAAxH,EAA+D,WAAA,CAA0B,QAAA,CAAD,mBAAzB,CAA/D,EAAwF;AAAG,IAAA,QAAQ,EAAE,IAAA,CAAA,MAAA,CAAO;AAApB,GAAxF,CAAA,E,IAAA,E;;AAAA,I,6BAAA,CACG,CAHP,C,uCAI4F,MAAA,CAAA,WAAA,IAAe,MAAA,CAAA,YAAA,KAAY,S,kBAAvH,YAAA,CAAqK,mBAArK,EAAA,WAAA,CAAqK;UAAA;AAA1J,IAAA,KAAK,EAAE,QAAA,CAAA,aAAmJ;AAAnI,IAAA,IAAI,EAAE,MAAA,CAAA;AAA6H,GAArK,EAA6D,WAAA,CAAwB,QAAA,CAAD,iBAAvB,CAA7D,EAAoF;AAAoD,IAAA,QAAQ,EAAE,IAAA,CAAA,MAAA,CAAO;AAArE,GAApF,CAAA,E,IAAA,E;;AAAA,I,6BAAA,C,uCACgG,MAAA,CAAA,WAAA,IAAe,MAAA,CAAA,YAAA,KAAY,S,kBAA3H,YAAA,CAAyK,mBAAzK,EAAA,WAAA,CAAyK;UAAA;AAA9J,IAAA,KAAK,EAAE,QAAA,CAAA,eAAuJ;AAArI,IAAA,IAAI,EAAE,MAAA,CAAA;AAA+H,GAAzK,EAA+D,WAAA,CAA0B,QAAA,CAAD,mBAAzB,CAA/D,EAAwF;AAAoD,IAAA,QAAQ,EAAE,IAAA,CAAA,MAAA,CAAO;AAArE,GAAxF,CAAA,E,IAAA,E;;AAAA,I,6BAAA,C,sCARJ,E;;AAAA,G","sourcesContent":["<template>\n    <span :class=\"containerClass\" :style=\"style\">\n        <INInputText ref=\"input\" :class=\"['p-inputnumber-input', inputClass]\" :style=\"inputStyle\" :value=\"formattedValue\" v-bind=\"$attrs\" :aria-valumin=\"min\" :aria-valuemax=\"max\"\n           @input=\"onUserInput\" @keydown=\"onInputKeyDown\" @keypress=\"onInputKeyPress\" @paste=\"onPaste\" @click=\"onInputClick\" @focus=\"onInputFocus\" @blur=\"onInputBlur\"/>\n        <span class=\"p-inputnumber-button-group\" v-if=\"showButtons && buttonLayout === 'stacked'\">\n            <INButton :class=\"upButtonClass\" :icon=\"incrementButtonIcon\" v-on=\"upButtonListeners\" :disabled=\"$attrs.disabled\" />\n            <INButton :class=\"downButtonClass\" :icon=\"decrementButtonIcon\" v-on=\"downButtonListeners\" :disabled=\"$attrs.disabled\" />\n        </span>\n        <INButton :class=\"upButtonClass\" :icon=\"incrementButtonIcon\" v-on=\"upButtonListeners\" v-if=\"showButtons && buttonLayout !== 'stacked'\" :disabled=\"$attrs.disabled\" />\n        <INButton :class=\"downButtonClass\" :icon=\"decrementButtonIcon\" v-on=\"downButtonListeners\" v-if=\"showButtons && buttonLayout !== 'stacked'\" :disabled=\"$attrs.disabled\" />\n    </span>\n</template>\n\n<script>\nimport InputText from '../inputtext/InputText';\nimport Button from '../button/Button';\n\nexport default {\n    inheritAttrs: false,\n    emits: ['update:modelValue', 'input'],\n    props: {\n        modelValue: {\n            type: Number,\n            default: null\n        },\n        format: {\n            type: Boolean,\n            default: true\n        },\n        showButtons: {\n            type: Boolean,\n            default: false\n        },\n        buttonLayout: {\n            type: String,\n            default: 'stacked'\n        },\n        incrementButtonClass: {\n            type: String,\n            default: null,\n        },\n        decrementButtonClass: {\n            type: String,\n            default: null,\n        },\n        incrementButtonIcon: {\n            type: String,\n            default: 'pi pi-angle-up',\n        },\n        decrementButtonIcon: {\n            type: String,\n            default: 'pi pi-angle-down',\n        },\n        locale: {\n            type: String,\n            default: undefined\n        },\n        localeMatcher: {\n            type: String,\n            default: undefined\n        },\n        mode: {\n            type: String,\n            default: 'decimal'\n        },\n        prefix: {\n            type: String,\n            default: null\n        },\n        suffix: {\n            type: String,\n            default: null\n        },\n        currency: {\n            type: String,\n            default: undefined\n        },\n        currencyDisplay: {\n            type: String,\n            default: undefined\n        },\n        useGrouping: {\n            type: Boolean,\n            default: true\n        },\n        minFractionDigits: {\n            type: Number,\n            default: undefined\n        },\n        maxFractionDigits: {\n            type: Number,\n            default: undefined\n        },\n        min: {\n            type: Number,\n            default: null\n        },\n        max: {\n            type: Number,\n            default: null\n        },\n        step: {\n            type: Number,\n            default: 1\n        },\n        style: null,\n        class: null,\n        inputStyle: null,\n        inputClass: null\n    },\n    numberFormat: null,\n    _numeral: null,\n    _decimal: null,\n    _group: null,\n    _minusSign: null,\n    _currency: null,\n    _suffix: null,\n    _prefix: null,\n    _index: null,\n    groupChar: '',\n    isSpecialChar: null,\n    prefixChar: null,\n    suffixChar: null,\n    timer: null,\n    data() {\n        return {\n            focused: false\n        }\n    },\n    watch: {\n\t\tlocale(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        localeMatcher(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        mode(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        currency(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        currencyDisplay(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        useGrouping(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        minFractionDigits(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        maxFractionDigits(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        suffix(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        },\n        prefix(newValue, oldValue) {\n            this.updateConstructParser(newValue, oldValue);\n        }\n    },\n    created() {\n        this.constructParser();\n    },\n    methods: {\n        getOptions() {\n            return {\n                localeMatcher: this.localeMatcher,\n                style: this.mode,\n                currency: this.currency,\n                currencyDisplay: this.currencyDisplay,\n                useGrouping: this.useGrouping,\n                minimumFractionDigits: this.minFractionDigits,\n                maximumFractionDigits: this.maxFractionDigits\n            };\n        },\n        constructParser() {\n            this.numberFormat = new Intl.NumberFormat(this.locale, this.getOptions());\n            const numerals = [...new Intl.NumberFormat(this.locale, {useGrouping: false}).format(9876543210)].reverse();\n            const index = new Map(numerals.map((d, i) => [d, i]));\n            this._numeral = new RegExp(`[${numerals.join('')}]`, 'g');\n            this._decimal = this.getDecimalExpression();\n            this._group = this.getGroupingExpression();\n            this._minusSign = this.getMinusSignExpression();\n            this._currency = this.getCurrencyExpression();\n            this._suffix = this.getSuffixExpression();\n            this._prefix = this.getPrefixExpression();\n            this._index = d => index.get(d);\n        },\n        updateConstructParser(newValue, oldValue) {\n            if (newValue !== oldValue) {\n                this.constructParser();\n            }\n        },\n        escapeRegExp(text) {\n            return text.replace(/[-[\\]{}()*+?.,\\\\^$|#\\s]/g, '\\\\$&');\n        },\n        getDecimalExpression() {\n            const formatter = new Intl.NumberFormat(this.locale, {useGrouping: false});\n            return new RegExp(`[${formatter.format(1.1).trim().replace(this._numeral, '')}]`, 'g');\n        },\n        getGroupingExpression() {\n            const formatter = new Intl.NumberFormat(this.locale, {useGrouping: true});\n            this.groupChar = formatter.format(1000000).trim().replace(this._numeral, '').charAt(0);\n            return new RegExp(`[${this.groupChar}]`, 'g');\n        },\n        getMinusSignExpression() {\n            const formatter = new Intl.NumberFormat(this.locale, {useGrouping: false});\n            return new RegExp(`[${formatter.format(-1).trim().replace(this._numeral, '')}]`, 'g');\n        },\n        getCurrencyExpression() {\n            if (this.currency) {\n                const formatter = new Intl.NumberFormat(this.locale, {style: 'currency', currency: this.currency, currencyDisplay: this.currencyDisplay});\n                return new RegExp(`[${formatter.format(1).replace(/\\s/g, '').replace(this._numeral, '').replace(this._decimal, '').replace(this._group, '')}]`, 'g');\n            }\n\n            return new RegExp(`[]`,'g');\n        },\n        getPrefixExpression() {\n            if (this.prefix) {\n                this.prefixChar = this.prefix;\n            }\n            else {\n                const formatter = new Intl.NumberFormat(this.locale, {style: this.mode, currency: this.currency, currencyDisplay: this.currencyDisplay});\n                this.prefixChar = formatter.format(1).split('1')[0];\n            }\n\n            return new RegExp(`${this.escapeRegExp(this.prefixChar||'')}`, 'g');\n        },\n        getSuffixExpression() {\n            if (this.suffix) {\n                this.suffixChar = this.suffix;\n            }\n            else {\n                const formatter = new Intl.NumberFormat(this.locale, {style: this.mode, currency: this.currency, currencyDisplay: this.currencyDisplay,\n                    minimumFractionDigits: 0, maximumFractionDigits: 0});\n                this.suffixChar = formatter.format(1).split('1')[1];\n            }\n\n            return new RegExp(`${this.escapeRegExp(this.suffixChar||'')}`, 'g');\n        },\n        formatValue(value) {\n            if (value != null) {\n                if (value === '-') { // Minus sign\n                    return value;\n                }\n\n                if (this.format) {\n                    let formatter = new Intl.NumberFormat(this.locale, this.getOptions());\n                    let formattedValue = formatter.format(value);\n                    if (this.prefix) {\n                        formattedValue = this.prefix + formattedValue;\n                    }\n\n                    if (this.suffix) {\n                        formattedValue = formattedValue + this.suffix;\n                    }\n\n                    return formattedValue;\n                }\n\n                return value.toString();\n            }\n\n            return '';\n        },\n        parseValue(text) {\n            let filteredText = text\n                                .replace(this._suffix, '')\n                                .replace(this._prefix, '')\n                                .trim()\n                                .replace(/\\s/g, '')\n                                .replace(this._currency, '')\n                                .replace(this._group, '')\n                                .replace(this._minusSign, '-')\n                                .replace(this._decimal, '.')\n                                .replace(this._numeral, this._index);\n\n            if (filteredText) {\n                if (filteredText === '-') // Minus sign\n                    return filteredText;\n\n                let parsedValue = +filteredText;\n                return isNaN(parsedValue) ? null : parsedValue;\n            }\n\n            return null;\n        },\n        repeat(event, interval, dir) {\n            let i = interval || 500;\n\n            this.clearTimer();\n            this.timer = setTimeout(() => {\n                this.repeat(event, 40, dir);\n            }, i);\n\n            this.spin(event, dir);\n        },\n        spin(event, dir) {\n            let step = this.step * dir;\n            let currentValue = this.parseValue(this.$refs.input.$el.value) || 0;\n            let newValue = this.validateValue(currentValue + step);\n\n            this.updateInput(newValue, null, 'spin');\n            this.updateModel(event, newValue);\n\n            this.handleOnInput(event, currentValue, newValue);\n        },\n        onUpButtonMouseDown(event) {\n            if (!this.$attrs.disabled) {\n                this.$refs.input.$el.focus();\n                this.repeat(event, null, 1);\n                event.preventDefault();\n            }\n        },\n        onUpButtonMouseUp() {\n            if (!this.$attrs.disabled) {\n                this.clearTimer();\n            }\n        },\n        onUpButtonMouseLeave() {\n            if (!this.$attrs.disabled) {\n                this.clearTimer();\n            }\n        },\n        onUpButtonKeyUp() {\n            if (!this.$attrs.disabled) {\n                this.clearTimer();\n            }\n        },\n        onUpButtonKeyDown(event) {\n            if (event.keyCode === 32 || event.keyCode === 13) {\n                this.repeat(event, null, 1);\n            }\n        },\n        onDownButtonMouseDown(event) {\n            if (!this.$attrs.disabled) {\n                this.$refs.input.$el.focus();\n                this.repeat(event, null, -1);\n                event.preventDefault();\n            }\n        },\n        onDownButtonMouseUp() {\n            if (!this.$attrs.disabled) {\n                this.clearTimer();\n            }\n        },\n        onDownButtonMouseLeave() {\n            if (!this.$attrs.disabled) {\n                this.clearTimer();\n            }\n        },\n        onDownButtonKeyUp() {\n            if (!this.$attrs.disabled) {\n                this.clearTimer();\n            }\n        },\n        onDownButtonKeyDown(event) {\n            if (event.keyCode === 32 || event.keyCode === 13) {\n                this.repeat(event, null, -1);\n            }\n        },\n        onUserInput() {\n            if (this.isSpecialChar) {\n                this.$refs.input.$el.value = this.lastValue;\n            }\n            this.isSpecialChar = false;\n        },\n        onInputKeyDown(event) {\n            this.lastValue = event.target.value;\n            if (event.shiftKey || event.altKey) {\n                this.isSpecialChar = true;\n                return;\n            }\n\n            let selectionStart = event.target.selectionStart;\n            let selectionEnd = event.target.selectionEnd;\n            let inputValue = event.target.value;\n            let newValueStr = null;\n\n            if (event.altKey) {\n                event.preventDefault();\n            }\n\n            switch (event.which) {\n                //up\n                case 38:\n                    this.spin(event, 1);\n                    event.preventDefault();\n                break;\n\n                //down\n                case 40:\n                    this.spin(event, -1);\n                    event.preventDefault();\n                break;\n\n                //left\n                case 37:\n                    if (!this.isNumeralChar(inputValue.charAt(selectionStart - 1))) {\n                        event.preventDefault();\n                    }\n                break;\n\n                //right\n                case 39:\n                    if (!this.isNumeralChar(inputValue.charAt(selectionStart))) {\n                        event.preventDefault();\n                    }\n                break;\n\n                //enter\n                case 13:\n                    newValueStr = this.validateValue(this.parseValue(inputValue));\n                    this.$refs.input.$el.value = this.formatValue(newValueStr);\n                    this.$refs.input.$el.setAttribute('aria-valuenow', newValueStr);\n                    this.updateModel(event, newValueStr);\n                break;\n\n                //backspace\n                case 8: {\n                    event.preventDefault();\n\n                    if (selectionStart === selectionEnd) {\n                        let deleteChar = inputValue.charAt(selectionStart - 1);\n                        let decimalCharIndex = inputValue.search(this._decimal);\n                        this._decimal.lastIndex = 0;\n\n                        if (this.isNumeralChar(deleteChar)) {\n                            if (this._group.test(deleteChar)) {\n                                this._group.lastIndex = 0;\n                                newValueStr = inputValue.slice(0, selectionStart - 2) + inputValue.slice(selectionStart - 1);\n                            }\n                            else if (this._decimal.test(deleteChar)) {\n                                this._decimal.lastIndex = 0;\n                                this.$refs.input.$el.setSelectionRange(selectionStart - 1, selectionStart - 1);\n                            }\n                            else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                                newValueStr = inputValue.slice(0, selectionStart - 1) + '0' + inputValue.slice(selectionStart);\n                            }\n                            else if (decimalCharIndex > 0 && decimalCharIndex === 1) {\n                                newValueStr = inputValue.slice(0, selectionStart - 1) + '0' + inputValue.slice(selectionStart);\n                                newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\n                            }\n                            else {\n                                newValueStr = inputValue.slice(0, selectionStart - 1) + inputValue.slice(selectionStart);\n                            }\n                        }\n\n                        this.updateValue(event, newValueStr, null, 'delete-single');\n                    }\n                    else {\n                        newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n                        this.updateValue(event, newValueStr, null, 'delete-range');\n                    }\n\n                    break;\n                }\n\n                // del\n                case 46:\n                    event.preventDefault();\n\n                    if (selectionStart === selectionEnd) {\n                        let deleteChar = inputValue.charAt(selectionStart);\n                        let decimalCharIndex = inputValue.search(this._decimal);\n                        this._decimal.lastIndex = 0;\n\n                        if (this.isNumeralChar(deleteChar)) {\n                            if (this._group.test(deleteChar)) {\n                                this._group.lastIndex = 0;\n                                newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 2);\n                            }\n                            else if (this._decimal.test(deleteChar)) {\n                                this._decimal.lastIndex = 0;\n                                this.$refs.input.$el.setSelectionRange(selectionStart + 1, selectionStart + 1);\n                            }\n                            else if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                                newValueStr = inputValue.slice(0, selectionStart) + '0' + inputValue.slice(selectionStart + 1);\n                            }\n                            else if (decimalCharIndex > 0 && decimalCharIndex === 1) {\n                                newValueStr = inputValue.slice(0, selectionStart) + '0' + inputValue.slice(selectionStart + 1);\n                                newValueStr = this.parseValue(newValueStr) > 0 ? newValueStr : '';\n                            }\n                            else {\n                                newValueStr = inputValue.slice(0, selectionStart) + inputValue.slice(selectionStart + 1);\n                            }\n                        }\n\n                        this.updateValue(event, newValueStr, null, 'delete-back-single');\n                    }\n                    else {\n                        newValueStr = this.deleteRange(inputValue, selectionStart, selectionEnd);\n                        this.updateValue(event, newValueStr, null, 'delete-range');\n                    }\n                break;\n\n                default:\n                break;\n            }\n        },\n        onInputKeyPress(event) {\n            event.preventDefault();\n            let code = event.which || event.keyCode;\n            let char = String.fromCharCode(code);\n            const isDecimalSign = this.isDecimalSign(char);\n            const isMinusSign = this.isMinusSign(char);\n\n            if ((48 <= code && code <= 57) || isMinusSign || isDecimalSign) {\n                this.insert(event, char, { isDecimalSign, isMinusSign });\n            }\n        },\n        onPaste(event) {\n            event.preventDefault();\n            let data = (event.clipboardData || window['clipboardData']).getData('Text');\n            if (data) {\n                let filteredData = this.parseValue(data);\n                if (filteredData != null) {\n                    this.insert(event, filteredData.toString());\n                }\n            }\n        },\n        allowMinusSign() {\n            return this.min === null || this.min < 0;\n        },\n        isMinusSign(char) {\n            if (this._minusSign.test(char)) {\n                this._minusSign.lastIndex = 0;\n                return true;\n            }\n\n            return false;\n        },\n        isDecimalSign(char) {\n            if (this._decimal.test(char)) {\n                this._decimal.lastIndex = 0;\n                return true;\n            }\n\n            return false;\n        },\n        insert(event, text, sign = { isDecimalSign: false, isMinusSign: false }) {\n            const minusCharIndexOnText = text.search(this._minusSign);\n            this._minusSign.lastIndex = 0;\n            if (!this.allowMinusSign() && minusCharIndexOnText !== -1) {\n                return;\n            }\n\n            const selectionStart = this.$refs.input.$el.selectionStart;\n            const selectionEnd = this.$refs.input.$el.selectionEnd;\n            let inputValue = this.$refs.input.$el.value.trim();\n            const decimalCharIndex = inputValue.search(this._decimal);\n            this._decimal.lastIndex = 0;\n            const minusCharIndex = inputValue.search(this._minusSign);\n            this._minusSign.lastIndex = 0;\n            let newValueStr;\n\n            if (sign.isMinusSign) {\n                if (selectionStart === 0) {\n                    newValueStr = inputValue;\n                    if (minusCharIndex === -1 || selectionEnd !== 0) {\n                        newValueStr = this.insertText(inputValue, text, 0, selectionEnd);\n                    }\n\n                    this.updateValue(event, newValueStr, text, 'insert');\n                }\n            }\n            else if (sign.isDecimalSign) {\n                if (decimalCharIndex > 0 && selectionStart === decimalCharIndex) {\n                    this.updateValue(event, inputValue, text, 'insert');\n                }\n                else if (decimalCharIndex > selectionStart && decimalCharIndex < selectionEnd) {\n                    newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n                    this.updateValue(event, newValueStr, text, 'insert');\n                }\n            }\n            else {\n                const maxFractionDigits = this.numberFormat.resolvedOptions().maximumFractionDigits;\n                const operation = selectionStart !== selectionEnd ? 'range-insert' : 'insert';\n\n                if (decimalCharIndex > 0 && selectionStart > decimalCharIndex) {\n                    if ((selectionStart + text.length - (decimalCharIndex + 1)) <= maxFractionDigits) {\n                        newValueStr = inputValue.slice(0, selectionStart) + text + inputValue.slice(selectionStart + text.length);\n                        this.updateValue(event, newValueStr, text, operation);\n                    }\n                }\n                else {\n                    newValueStr = this.insertText(inputValue, text, selectionStart, selectionEnd);\n                    this.updateValue(event, newValueStr, text, operation);\n                }\n            }\n        },\n        insertText(value, text, start, end) {\n            let textSplit = text.split('.');\n\n            if (textSplit.length === 2) {\n                const decimalCharIndex = value.slice(start, end).search(this._decimal);\n                this._decimal.lastIndex = 0;\n                return (decimalCharIndex > 0) ? value.slice(0, start) + this.formatValue(text) + value.slice(end) : (value || this.formatValue(text));\n            }\n            else if ((end - start) === value.length) {\n                return this.formatValue(text);\n            }\n            else if (start === 0) {\n                return text + value.slice(end);\n            }\n            else if (end === value.length) {\n                return value.slice(0, start) + text;\n            }\n            else {\n                return value.slice(0, start) + text + value.slice(end);\n            }\n        },\n        deleteRange(value, start, end) {\n            let newValueStr;\n\n            if ((end - start) === value.length)\n                newValueStr = '';\n            else if (start === 0)\n                newValueStr = value.slice(end);\n            else if (end === value.length)\n                newValueStr = value.slice(0, start);\n            else\n                newValueStr = value.slice(0, start) + value.slice(end);\n\n            return newValueStr;\n        },\n        initCursor() {\n            let selectionStart = this.$refs.input.$el.selectionStart;\n            let inputValue = this.$refs.input.$el.value;\n            let valueLength = inputValue.length;\n            let index = null;\n\n            let char = inputValue.charAt(selectionStart);\n            if (this.isNumeralChar(char)) {\n                return;\n            }\n\n            //left\n            let i = selectionStart - 1;\n            while (i >= 0) {\n                char = inputValue.charAt(i);\n                if (this.isNumeralChar(char)) {\n                    index = i;\n                    break;\n                }\n                else {\n                    i--;\n                }\n            }\n\n            if (index !== null) {\n                this.$refs.input.$el.setSelectionRange(index + 1, index + 1);\n            }\n            else {\n                i = selectionStart + 1;\n                while (i < valueLength) {\n                    char = inputValue.charAt(i);\n                    if (this.isNumeralChar(char)) {\n                        index = i;\n                        break;\n                    }\n                    else {\n                        i++;\n                    }\n                }\n\n                if (index !== null) {\n                    this.$refs.input.$el.setSelectionRange(index, index);\n                }\n            }\n        },\n        onInputClick() {\n            this.initCursor();\n        },\n        isNumeralChar(char) {\n            if (char.length === 1 && (this._numeral.test(char) || this._decimal.test(char) || this._group.test(char) || this._minusSign.test(char))) {\n                this.resetRegex();\n                return true;\n            }\n\n            return false;\n        },\n        resetRegex() {\n            this._numeral.lastIndex =  0;\n            this._decimal.lastIndex =  0;\n            this._group.lastIndex =  0;\n            this._minusSign.lastIndex =  0;\n        },\n        updateValue(event, valueStr, insertedValueStr, operation) {\n            let currentValue = this.$refs.input.$el.value;\n            let newValue = null;\n\n            if (valueStr != null) {\n                newValue = this.parseValue(valueStr);\n                this.updateInput(newValue, insertedValueStr, operation);\n            }\n\n            this.handleOnInput(event, currentValue, newValue);\n        },\n        handleOnInput(event, currentValue, newValue) {\n            if (this.isValueChanged(currentValue, newValue)) {\n                this.$emit('input', { originalEvent: event, value: newValue });\n            }\n        },\n        isValueChanged(currentValue, newValue) {\n            if (newValue === null && currentValue !== null) {\n                return true;\n            }\n\n            if (newValue != null) {\n                let parsedCurrentValue = (typeof currentValue === 'string') ? this.parseValue(currentValue) : currentValue;\n                return newValue !== parsedCurrentValue;\n            }\n\n            return false;\n        },\n        validateValue(value) {\n            if (this.min != null && value < this.min) {\n                return this.min;\n            }\n\n            if (this.max != null && value > this.max) {\n                return this.max;\n            }\n\n            if (value === '-') { // Minus sign\n                return null;\n            }\n\n            return value;\n        },\n        updateInput(value, insertedValueStr, operation) {\n            insertedValueStr = insertedValueStr || '';\n\n            let inputValue = this.$refs.input.$el.value;\n            let newValue = this.formatValue(value);\n            let currentLength = inputValue.length;\n\n            if (currentLength === 0) {\n                this.$refs.input.$el.value = newValue;\n                this.$refs.input.$el.setSelectionRange(0, 0);\n                this.initCursor();\n                const prefixLength = (this.prefixChar || '').length;\n                const selectionEnd = prefixLength + insertedValueStr.length;\n                this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n            }\n            else {\n                let selectionStart = this.$refs.input.$el.selectionStart;\n                let selectionEnd = this.$refs.input.$el.selectionEnd;\n                this.$refs.input.$el.value = newValue;\n                let newLength = newValue.length;\n\n                if (operation === 'range-insert') {\n                    const startValue = this.parseValue((inputValue || '').slice(0, selectionStart));\n                    const startValueStr = startValue !== null ? startValue.toString() : '';\n                    const startExpr = startValueStr.split('').join(`(${this.groupChar})?`);\n                    const sRegex = new RegExp(startExpr, 'g');\n                    sRegex.test(newValue);\n\n                    const tExpr = insertedValueStr.split('').join(`(${this.groupChar})?`);\n                    const tRegex = new RegExp(tExpr, 'g');\n                    tRegex.test(newValue.slice(sRegex.lastIndex));\n\n                    selectionEnd = sRegex.lastIndex + tRegex.lastIndex;\n                    this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                }\n                else if (newLength === currentLength) {\n                    if (operation === 'insert' || operation === 'delete-back-single')\n                        this.$refs.input.$el.setSelectionRange(selectionEnd + 1, selectionEnd + 1);\n                    else if (operation === 'delete-single')\n                        this.$refs.input.$el.setSelectionRange(selectionEnd - 1, selectionEnd - 1);\n                    else if (operation === 'delete-range' || operation === 'spin')\n                        this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                }\n                else if (operation === 'delete-back-single') {\n                    let prevChar = inputValue.charAt(selectionEnd - 1);\n                    let nextChar = inputValue.charAt(selectionEnd);\n                    let diff = currentLength - newLength;\n                    let isGroupChar = this._group.test(nextChar);\n\n                    if (isGroupChar && diff === 1) {\n                        selectionEnd += 1;\n                    }\n                    else if (!isGroupChar && this.isNumeralChar(prevChar)) {\n                        selectionEnd += (-1 * diff) + 1;\n                    }\n\n                    this._group.lastIndex = 0;\n                    this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                }\n                else {\n                    selectionEnd = selectionEnd + (newLength - currentLength);\n                    this.$refs.input.$el.setSelectionRange(selectionEnd, selectionEnd);\n                }\n            }\n\n            this.$refs.input.$el.setAttribute('aria-valuenow', value);\n        },\n        updateModel(event, value) {\n            this.$emit('update:modelValue', value);\n        },\n        onInputFocus() {\n            this.focused = true;\n        },\n        onInputBlur(event) {\n            this.focused = false;\n\n            let input = event.target;\n            let newValue = this.validateValue(this.parseValue(input.value));\n            input.value = this.formatValue(newValue);\n            input.setAttribute('aria-valuenow', newValue);\n            this.updateModel(event, newValue);\n        },\n        clearTimer() {\n            if (this.timer) {\n                clearInterval(this.timer);\n            }\n        }\n    },\n    computed: {\n        containerClass() {\n            return ['p-inputnumber p-component', this.class, {\n                'p-inputwrapper-filled': this.filled,\n                'p-inputwrapper-focus': this.focused,\n                'p-inputnumber-buttons-stacked': this.showButtons && this.buttonLayout === 'stacked',\n                'p-inputnumber-buttons-horizontal': this.showButtons && this.buttonLayout === 'horizontal',\n                'p-inputnumber-buttons-vertical': this.showButtons && this.buttonLayout === 'vertical'\n            }];\n        },\n        upButtonClass() {\n            return ['p-inputnumber-button p-inputnumber-button-up', this.incrementButtonClass];\n        },\n        downButtonClass() {\n            return ['p-inputnumber-button p-inputnumber-button-down', this.decrementButtonClass];\n        },\n        filled() {\n            return (this.modelValue != null && this.modelValue.toString().length > 0)\n        },\n        upButtonListeners() {\n            return {\n                mousedown: event => this.onUpButtonMouseDown(event),\n                mouseup: event => this.onUpButtonMouseUp(event),\n                mouseleave: event => this.onUpButtonMouseLeave(event),\n                keydown: event => this.onUpButtonKeyDown(event),\n                keyup: event => this.onUpButtonKeyUp(event)\n            }\n        },\n        downButtonListeners() {\n            return {\n                mousedown: event => this.onDownButtonMouseDown(event),\n                mouseup: event => this.onDownButtonMouseUp(event),\n                mouseleave: event => this.onDownButtonMouseLeave(event),\n                keydown: event => this.onDownButtonKeyDown(event),\n                keyup: event => this.onDownButtonKeyUp(event)\n            }\n        },\n        formattedValue() {\n            return this.formatValue(this.modelValue);\n        }\n    },\n    components: {\n        'INInputText': InputText,\n        'INButton': Button\n    }\n}\n</script>\n\n<style>\n.p-inputnumber {\n    display: inline-flex;\n}\n\n.p-inputnumber-button {\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    flex: 0 0 auto;\n}\n\n.p-inputnumber-buttons-stacked .p-button.p-inputnumber-button .p-button-label,\n.p-inputnumber-buttons-horizontal .p-button.p-inputnumber-button .p-button-label {\n    display: none;\n}\n\n.p-inputnumber-buttons-stacked .p-button.p-inputnumber-button-up {\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n    border-bottom-right-radius: 0;\n    padding: 0;\n}\n\n.p-inputnumber-buttons-stacked .p-inputnumber-input {\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n}\n\n.p-inputnumber-buttons-stacked .p-button.p-inputnumber-button-down {\n    border-top-left-radius: 0;\n    border-top-right-radius: 0;\n    border-bottom-left-radius: 0;\n    padding: 0;\n}\n\n.p-inputnumber-buttons-stacked .p-inputnumber-button-group {\n    display: flex;\n    flex-direction: column;\n}\n\n.p-inputnumber-buttons-stacked .p-inputnumber-button-group .p-button.p-inputnumber-button {\n    flex: 1 1 auto;\n}\n\n.p-inputnumber-buttons-horizontal .p-button.p-inputnumber-button-up {\n    order: 3;\n    border-top-left-radius: 0;\n    border-bottom-left-radius: 0;\n}\n\n.p-inputnumber-buttons-horizontal .p-inputnumber-input {\n    order: 2;\n    border-radius: 0;\n}\n\n.p-inputnumber-buttons-horizontal .p-button.p-inputnumber-button-down {\n    order: 1;\n    border-top-right-radius: 0;\n    border-bottom-right-radius: 0;\n}\n\n.p-inputnumber-buttons-vertical {\n    flex-direction: column;\n}\n\n.p-inputnumber-buttons-vertical .p-button.p-inputnumber-button-up {\n    order: 1;\n    border-bottom-left-radius: 0;\n    border-bottom-right-radius: 0;\n    width: 100%;\n}\n\n.p-inputnumber-buttons-vertical .p-inputnumber-input {\n    order: 2;\n    border-radius: 0;\n    text-align: center;\n}\n\n.p-inputnumber-buttons-vertical .p-button.p-inputnumber-button-down {\n    order: 3;\n    border-top-left-radius: 0;\n    border-top-right-radius: 0;\n    width: 100%;\n}\n\n.p-inputnumber-input {\n    flex: 1 1 auto;\n}\n\n.p-fluid .p-inputnumber {\n    width: 100%;\n}\n\n.p-fluid .p-inputnumber .p-inputnumber-input {\n    width: 1%;\n}\n\n.p-fluid .p-inputnumber-buttons-vertical .p-inputnumber-input {\n    width: 100%;\n}\n</style>\n"],"sourceRoot":""}]}