{"ast":null,"code":"import { resolveComponent as _resolveComponent, createVNode as _createVNode, createElementVNode as _createElementVNode, openBlock as _openBlock, createElementBlock as _createElementBlock, pushScopeId as _pushScopeId, popScopeId as _popScopeId } from \"vue\";\nconst _withScopeId = n => (_pushScopeId(\"data-v-22ba47ca\"), n = n(), _popScopeId(), n);\nconst _hoisted_1 = {\n  class: \"mt-6 max-w-screen flex align-items-center justify-content-center\"\n};\nexport function render(_ctx, _cache, $props, $setup, $data, $options) {\n  const _component_Nav = _resolveComponent(\"Nav\");\n  const _component_Footer = _resolveComponent(\"Footer\");\n  return _openBlock(), _createElementBlock(\"div\", null, [_createElementVNode(\"div\", _hoisted_1, [_createVNode(_component_Nav)]), _createVNode(_component_Footer)]);\n}","map":{"version":3,"mappings":";;;EAGMA,KAAK,EAAC;AAAkE;;;;uBAF5EC,oBAQM,cAPJC,oBAIM,OAJNC,UAIM,GADJC,aAAWC,mBAGbD,aAAiBE","names":["class","_createElementBlock","_createElementVNode","_hoisted_1","_createVNode","_component_Nav","_component_Footer"],"sourceRoot":"","sources":["D:\\vue_codes\\Docker-django-vue-boilerplate\\src\\views\\Dashboard.vue"],"sourcesContent":["<template>\r\n  <div>\r\n    <div\r\n      class=\"mt-6 max-w-screen flex align-items-center justify-content-center\"\r\n    >\r\n      <Nav></Nav>\r\n    </div>\r\n\r\n    <Footer></Footer>\r\n  </div>\r\n</template>\r\n<script>\r\nimport { mapState } from \"vuex\";\r\nimport axios from \"axios\";\r\nimport Json from \"@/assets/endpoints.json\";\r\nimport Nav from \"@/components/NavBar.vue\";\r\nimport Footer from \"@/components/Footer.vue\";\r\nexport default {\r\n  data() {\r\n    return {\r\n      server: Json[0][\"Course\"][\"SERVER\"],\r\n      register_status: Json[0][\"Course\"][\"REGISTEREDSTATUS\"],\r\n      register: Json[0][\"Course\"][\"REGISTERED\"],\r\n      check: [],\r\n      status: \"\",\r\n      path: \"\",\r\n\r\n      user_in: \"\",\r\n    };\r\n  },\r\n  components: {\r\n    Nav,\r\n    Footer,\r\n  },\r\n  computed: {\r\n    ...mapState([\"token\", \"user\", \"heading\", \"height\"]),\r\n  },\r\n  methods: {\r\n    check_registered() {\r\n      const headers = {\r\n        Authorization: \"Token\" + \" \" + this.token,\r\n      };\r\n      axios\r\n        .get(this.server + this.register_status, { headers: headers })\r\n        .then((resp) => {\r\n          console.log(resp.data);\r\n          console.log(resp.status);\r\n          if (resp.status == 200) {\r\n            console.log(resp.data.length);\r\n            if (resp.data.length != 0) {\r\n              this.status = \"R\";\r\n            }\r\n            if (resp.data.length == 0) {\r\n              this.status = \"N\";\r\n            }\r\n          }\r\n        });\r\n    },\r\n    to_videos() {\r\n      this.$router.push(\"/Videos\");\r\n    },\r\n    register_system() {\r\n      console.log(\"in regitser\");\r\n      const headers = {\r\n        Authorization: \"Token\" + \" \" + this.token,\r\n      };\r\n      let reglink = this.server + this.register;\r\n      console.log(reglink);\r\n      axios\r\n        .post(reglink, { user: this.user }, { headers: headers })\r\n        .then((resp) => {\r\n          console.log(resp.data);\r\n          console.log(resp.status);\r\n          if (resp.status == 201) {\r\n            this.$router.push(\"/Demo\");\r\n          }\r\n        });\r\n    },\r\n    get_user() {\r\n      this.user_in = this.user;\r\n    },\r\n    taketocourse(name) {\r\n      console.log(name);\r\n      this.$store.dispatch(\"set_course\", name);\r\n      this.$router.push(\"/Course\");\r\n    },\r\n  },\r\n  created() {\r\n    this.get_user();\r\n    this.check_registered();\r\n  },\r\n};\r\n</script>\r\n<style scoped>\r\n.div {\r\n  text-align: center;\r\n}\r\n.Dash {\r\n  text-align: center;\r\n}\r\n#image {\r\n  display: block;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 40%;\r\n}\r\n#mark {\r\n  padding-top: 30px;\r\n  display: block;\r\n  margin-left: auto;\r\n  margin-right: auto;\r\n  width: 100%;\r\n}\r\n</style>\r\n"]},"metadata":{},"sourceType":"module","externalDependencies":[]}