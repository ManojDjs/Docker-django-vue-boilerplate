{"remainingRequest":"/home/ubuntu/PycharmProjects/Docker-django-vue-boilerplate/node_modules/vue-loader-v16/dist/index.js??ref--0-1!/home/ubuntu/PycharmProjects/Docker-django-vue-boilerplate/node_modules/primevue/components/splitter/Splitter.vue?vue&type=template&id=5ec4bb32&bindings={\"layout\":\"props\",\"gutterSize\":\"props\",\"stateKey\":\"props\",\"stateStorage\":\"props\",\"isSplitterPanel\":\"options\",\"onResizeStart\":\"options\",\"onResize\":\"options\",\"onResizeEnd\":\"options\",\"onGutterMouseDown\":\"options\",\"onGutterTouchStart\":\"options\",\"onGutterTouchMove\":\"options\",\"onGutterTouchEnd\":\"options\",\"bindMouseListeners\":\"options\",\"validateResize\":\"options\",\"unbindMouseListeners\":\"options\",\"clear\":\"options\",\"isStateful\":\"options\",\"getStorage\":\"options\",\"saveState\":\"options\",\"restoreState\":\"options\",\"containerClass\":\"options\",\"panels\":\"options\",\"gutterStyle\":\"options\",\"horizontal\":\"options\"}","dependencies":[{"path":"/home/ubuntu/PycharmProjects/Docker-django-vue-boilerplate/node_modules/primevue/components/splitter/Splitter.vue","mtime":499162500000},{"path":"/home/ubuntu/PycharmProjects/Docker-django-vue-boilerplate/node_modules/cache-loader/dist/cjs.js","mtime":1604800558196},{"path":"/home/ubuntu/PycharmProjects/Docker-django-vue-boilerplate/node_modules/babel-loader/lib/index.js","mtime":1604800558176},{"path":"/home/ubuntu/PycharmProjects/Docker-django-vue-boilerplate/node_modules/vue-loader-v16/dist/templateLoader.js","mtime":1604800559128},{"path":"/home/ubuntu/PycharmProjects/Docker-django-vue-boilerplate/node_modules/cache-loader/dist/cjs.js","mtime":1604800558196},{"path":"/home/ubuntu/PycharmProjects/Docker-django-vue-boilerplate/node_modules/vue-loader-v16/dist/index.js","mtime":1604800559128}],"contextDependencies":[],"result":[{"type":"Buffer","data":"base64:CiAgICA8ZGl2IDpjbGFzcz0iY29udGFpbmVyQ2xhc3MiPgogICAgICAgIDx0ZW1wbGF0ZSB2LWZvcj0iKHBhbmVsLGkpIG9mIHBhbmVscyIgOmtleT0iaSIgY2xhc3M9InAtc3BsaXR0ZXItcGFuZWwiPgogICAgICAgICAgICAgPGNvbXBvbmVudCA6aXM9InBhbmVsIj48L2NvbXBvbmVudD4KICAgICAgICAgICAgIDxkaXYgY2xhc3M9InAtc3BsaXR0ZXItZ3V0dGVyIiB2LWlmPSJpICE9PSAocGFuZWxzLmxlbmd0aCAtMSkiIDpzdHlsZT0iZ3V0dGVyU3R5bGUiIAogICAgICAgICAgICAgICAgQG1vdXNlZG93bj0ib25HdXR0ZXJNb3VzZURvd24oJGV2ZW50LCBpKSIgCiAgICAgICAgICAgICAgICBAdG91Y2hzdGFydD0ib25HdXR0ZXJUb3VjaFN0YXJ0KCRldmVudCwgaSkiCiAgICAgICAgICAgICAgICBAdG91Y2htb3ZlPSJvbkd1dHRlclRvdWNoTW92ZSgkZXZlbnQsIGkpIgogICAgICAgICAgICAgICAgQHRvdWNoZW5kPSJvbkd1dHRlclRvdWNoRW5kKCRldmVudCwgaSkiPgogICAgICAgICAgICAgICAgIDxkaXYgY2xhc3M9InAtc3BsaXR0ZXItZ3V0dGVyLWhhbmRsZSI+PC9kaXY+CiAgICAgICAgICAgICA8L2Rpdj4KICAgICAgICA8L3RlbXBsYXRlPgogICAgPC9kaXY+Cg=="},{"version":3,"sources":["/home/ubuntu/PycharmProjects/Docker-django-vue-boilerplate/node_modules/primevue/components/splitter/Splitter.vue"],"names":[],"mappings":";IACI,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;QACxB,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aAClE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aAClC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;gBAC/E,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;gBACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;gBAC1C,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC;gBACxC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC;iBACtC,CAAC,CAAC,CAAC,EAAE,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;aAC/C,CAAC,CAAC,CAAC,CAAC,CAAC;QACV,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC;IACd,CAAC,CAAC,CAAC,CAAC,CAAC","file":"/home/ubuntu/PycharmProjects/Docker-django-vue-boilerplate/node_modules/primevue/components/splitter/Splitter.vue","sourceRoot":"","sourcesContent":["<template>\n    <div :class=\"containerClass\">\n        <template v-for=\"(panel,i) of panels\" :key=\"i\" class=\"p-splitter-panel\">\n             <component :is=\"panel\"></component>\n             <div class=\"p-splitter-gutter\" v-if=\"i !== (panels.length -1)\" :style=\"gutterStyle\" \n                @mousedown=\"onGutterMouseDown($event, i)\" \n                @touchstart=\"onGutterTouchStart($event, i)\"\n                @touchmove=\"onGutterTouchMove($event, i)\"\n                @touchend=\"onGutterTouchEnd($event, i)\">\n                 <div class=\"p-splitter-gutter-handle\"></div>\n             </div>\n        </template>\n    </div>\n</template>\n\n<script>\nimport DomHandler from '../utils/DomHandler';\n\nexport default {\n    emits: ['resizeend'],\n    name: 'splitter',\n    props: {\n        layout: {\n            type: String,\n            default: 'horizontal'\n        },\n        gutterSize: {\n            type: Number,\n            default: 4\n        },\n        stateKey: {\n            type: String,\n            default: null\n        },\n        stateStorage: {\n            type: String,\n            default: 'session'\n        }\n    },\n    dragging: false,\n    mouseMoveListener: null,\n    mouseUpListener: null,\n    size: null,\n    gutterElement: null,\n    startPos: null,\n    prevPanelElement: null,\n    nextPanelElement: null,\n    nextPanelSize: null,\n    prevPanelSize: null,\n    panelSizes: null,\n    prevPanelIndex: null, \n    mounted() {\n        if (this.panels && this.panels.length) {\n            let initialized = false;\n            if (this.isStateful()) {\n                initialized = this.restoreState();\n            }\n\n            if (!initialized) {\n                let children = [...this.$el.children].filter(child => DomHandler.hasClass(child, 'p-splitter-panel'));\n                let _panelSizes = [];\n\n                this.panels.map((panel, i) => {\n                    let panelInitialSize = panel.props && panel.props.size ? panel.props.size: null;\n                    let panelSize = panelInitialSize || (100 / this.panels.length);\n                    _panelSizes[i] = panelSize;\n                    children[i].style.flexBasis = 'calc(' + panelSize + '% - ' + ((this.panels.length - 1) * this.gutterSize) + 'px)';\n                });\n\n                this.panelSizes = _panelSizes;\n            }\n        }\n    },\n    beforeUnmount() {\n        this.clear();\n        this.unbindMouseListeners();\n    },\n    methods: {\n        isSplitterPanel(child) {\n            return child.type.name === 'splitterpanel';\n        },\n        onResizeStart(event, index) {\n            this.gutterElement = event.currentTarget;\n            this.size = this.horizontal ? DomHandler.getWidth(this.$el) : DomHandler.getHeight(this.$el);\n            this.dragging = true;\n            this.startPos = this.layout === 'horizontal' ? event.pageX : event.pageY;\n            this.prevPanelElement = this.gutterElement.previousElementSibling;\n            this.nextPanelElement = this.gutterElement.nextElementSibling;\n            this.prevPanelSize = 100 * (this.horizontal ? DomHandler.getOuterWidth(this.prevPanelElement, true): DomHandler.getOuterHeight(this.prevPanelElement, true)) / this.size;\n            this.nextPanelSize = 100 * (this.horizontal ? DomHandler.getOuterWidth(this.nextPanelElement, true): DomHandler.getOuterHeight(this.nextPanelElement, true)) / this.size;\n            this.prevPanelIndex = index;\n            DomHandler.addClass(this.gutterElement, 'p-splitter-gutter-resizing');\n            DomHandler.addClass(this.$el, 'p-splitter-resizing');\n        },\n        onResize(event) {\n            let newPos;\n            if (this.horizontal)\n                newPos = (event.pageX * 100 / this.size) - (this.startPos * 100 / this.size);\n            else\n                newPos = (event.pageY * 100 / this.size) - (this.startPos * 100 / this.size);\n\n            let newPrevPanelSize = this.prevPanelSize + newPos;\n            let newNextPanelSize = this.nextPanelSize - newPos;\n            \n            if (this.validateResize(newPrevPanelSize, newNextPanelSize)) {\n                this.prevPanelElement.style.flexBasis = 'calc(' + newPrevPanelSize + '% - ' + ((this.panels.length - 1) * this.gutterSize) + 'px)';\n                this.nextPanelElement.style.flexBasis = 'calc(' + newNextPanelSize + '% - ' + ((this.panels.length - 1) * this.gutterSize) + 'px)';\n                this.panelSizes[this.prevPanelIndex] = newPrevPanelSize;\n                this.panelSizes[this.prevPanelIndex + 1] = newNextPanelSize;\n            }\n        },\n        onResizeEnd(event) {\n            if (this.isStateful()) {\n                this.saveState();\n            }\n\n            this.$emit('resizeend', {originalEvent: event, sizes: this.panelSizes});\n            DomHandler.removeClass(this.gutterElement, 'p-splitter-gutter-resizing');\n            DomHandler.removeClass(this.$el, 'p-splitter-resizing');\n            this.clear();\n        },\n        onGutterMouseDown(event, index) {\n            this.onResizeStart(event, index);\n            this.bindMouseListeners();\n        },\n        onGutterTouchStart(event, index) {\n            this.onResizeStart(event, index);\n            event.preventDefault();\n        },\n        onGutterTouchMove(event) {\n            this.onResize(event);\n            event.preventDefault();\n        },\n        onGutterTouchEnd(event) {\n            this.onResizeEnd(event);\n            event.preventDefault();\n        },\n        bindMouseListeners() {\n            if (!this.mouseMoveListener) {\n                this.mouseMoveListener = event => this.onResize(event)\n                document.addEventListener('mousemove', this.mouseMoveListener);\n            }\n\n            if (!this.mouseUpListener) {\n                this.mouseUpListener = event => {\n                    this.onResizeEnd(event);\n                    this.unbindMouseListeners();\n                }\n                document.addEventListener('mouseup', this.mouseUpListener);\n            }\n        },\n        validateResize(newPrevPanelSize, newNextPanelSize) {\n            if (this.panels[0].props && this.panels[0].props.minSize && this.panels[0].props.minSize > newPrevPanelSize) {\n                return false;\n            }\n\n            if (this.panels[1].props && this.panels[1].props.minSize && this.panels[1].props.minSize > newNextPanelSize) {\n                return false;\n            }\n\n            return true;\n        },\n        unbindMouseListeners() {\n            if (this.mouseMoveListener) {\n                document.removeEventListener('mousemove', this.mouseMoveListener);\n                this.mouseMoveListener = null;\n            }\n\n            if (this.mouseUpListener) {\n                document.removeEventListener('mouseup', this.mouseUpListener);\n                this.mouseUpListener = null;\n            }\n        },\n        clear() {\n            this.dragging = false;\n            this.size = null;\n            this.startPos = null;\n            this.prevPanelElement = null;\n            this.nextPanelElement = null;\n            this.prevPanelSize = null;\n            this.nextPanelSize = null;\n            this.gutterElement = null;\n            this.prevPanelIndex = null;\n        },\n        isStateful() {\n            return this.stateKey != null;\n        },\n        getStorage() {\n            switch(this.stateStorage) {\n                case 'local':\n                    return window.localStorage;\n\n                case 'session':\n                    return window.sessionStorage;\n\n                default:\n                    throw new Error(this.stateStorage + ' is not a valid value for the state storage, supported values are \"local\" and \"session\".');\n            }\n        },\n        saveState() {\n            this.getStorage().setItem(this.stateKey, JSON.stringify(this.panelSizes));\n        },\n        restoreState() {\n            const storage = this.getStorage();\n            const stateString = storage.getItem(this.stateKey);\n\n            if (stateString) {\n                this.panelSizes = JSON.parse(stateString);\n                let children = [...this.$el.children].filter(child => DomHandler.hasClass(child, 'p-splitter-panel'));\n                children.forEach((child, i) => {\n                    child.style.flexBasis = 'calc(' + this.panelSizes[i] + '% - ' + ((this.panels.length - 1) * this.gutterSize) + 'px)';\n                });\n\n                return true;\n            }\n\n            return false;\n        }\n    },\n    computed: {\n        containerClass() {\n            return ['p-splitter p-component', 'p-splitter-' + this.layout];\n        },\n        panels() {\n            const panels = [];\n            this.$slots.default().forEach(child => {\n                    if (this.isSplitterPanel(child)) {\n                        panels.push(child);\n                    }\n                    else if (child.children.length > 0) {\n                        child.children.forEach(nestedChild => {\n                            if (this.isSplitterPanel(nestedChild)) {\n                                panels.push(nestedChild)\n                            }\n                        });\n                    }\n                }\n            )\n            return panels;\n        },\n        gutterStyle() {\n            if (this.horizontal)\n                return {width: this.gutterSize + 'px'};\n            else\n                return {height: this.gutterSize + 'px'};\n        },\n        horizontal() {\n            return this.layout === 'horizontal';\n        }\n    }\n}\n</script>\n\n<style>\n.p-splitter {\n    display: flex;\n    flex-wrap: nowrap;\n}\n\n.p-splitter-vertical {\n    flex-direction: column;\n}\n\n.p-splitter-panel {\n    flex-grow: 1;\n}\n\n.p-splitter-panel-nested {\n    display: flex;\n}\n\n.p-splitter-panel .p-splitter {\n    flex-grow: 1;\n    border: 0 none;\n}\n\n.p-splitter-gutter {\n    flex-grow: 0;\n    flex-shrink: 0;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    cursor: col-resize;\n}\n\n.p-splitter-horizontal.p-splitter-resizing {\n    cursor: col-resize;\n    user-select: none;\n}\n\n.p-splitter-horizontal > .p-splitter-gutter > .p-splitter-gutter-handle {\n    height: 24px;\n    width: 100%;\n}\n\n.p-splitter-horizontal > .p-splitter-gutter {\n    cursor: col-resize;\n}\n\n.p-splitter-vertical.p-splitter-resizing {\n    cursor: row-resize;\n    user-select: none;\n}\n\n.p-splitter-vertical > .p-splitter-gutter {\n    cursor: row-resize;\n}\n\n.p-splitter-vertical > .p-splitter-gutter > .p-splitter-gutter-handle {\n    width: 24px;\n    height: 100%;\n}\n</style>\n"]}]}